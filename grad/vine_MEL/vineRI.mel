Generated by Cutter v7.1.5 at 11:5:24 on the 2.16.2016.
// The source document on which this mel script is based is,
//    "/home/wanlyu20/mount/stuhome/maya/projects/RfM_mel/vine.rman"
// Cutter software by Malcolm Kesson (all rights reserved).
// 
// Post Transform Mel Script
//
global proc vineRI() {
// Get the name of the transform node
string $tformNode = `rman ctxGetObject`;
  
// The node may hava a number in its name that we can use to set the
// random number generator
int    $nodeNumber = `match "[0-9]+" $tformNode`;
if($nodeNumber != "") {
    seed(int($nodeNumber));
    }
  
// Bounding box is only relevant if the transform node is not a group.
string $children[] = `listRelatives -children $tformNode`;
float $bb_width = -1, $bb_height = -1, $bb_depth = -1;
if(size($children) == 1) {
    string $shapeNode = $children[0];
    $bb_width =  `getAttr ($shapeNode + ".boundingBoxSizeX")`;
    $bb_height = `getAttr ($shapeNode + ".boundingBoxSizeY")`;
    $bb_depth =  `getAttr ($shapeNode + ".boundingBoxSizeZ")`;
    }
  
string $attr;
  
$attr = `rmanGetAttrName "vine_addStem"`;
int $vine_addStem = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_blobFile"`;
string $vine_blobFile = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_vSeed"`;
int $vine_vSeed = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_vden"`;
float $vine_vden = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_vstep"`;
float $vine_vstep = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_vstepRand"`;
float $vine_vstepRand = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_vRot"`;
float $vine_vRot = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_vRad"`;
float $vine_vRad = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_vOffset"`;
float $vine_vOffset = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_sTransition"`;
float $vine_sTransition = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_addLeaf"`;
int $vine_addLeaf = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_lSeed"`;
int $vine_lSeed = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_lden"`;
float $vine_lden = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_lTrans"`;
float $vine_lTrans = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_lRot"`;
float $vine_lRot = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_lScale"`;
float $vine_lScale = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_lfile1"`;
string $vine_lfile1 = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_lfile2"`;
string $vine_lfile2 = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_lmix"`;
float $vine_lmix = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_lTransition"`;
float $vine_lTransition = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_addFlower"`;
int $vine_addFlower = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_fSeed"`;
int $vine_fSeed = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_fden"`;
float $vine_fden = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_fTrans"`;
float $vine_fTrans = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_fRot"`;
float $vine_fRot = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_fScale"`;
float $vine_fScale = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_ffile1"`;
string $vine_ffile1 = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_ffile2"`;
string $vine_ffile2 = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_fmix"`;
float $vine_fmix = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_fTranstion"`;
float $vine_fTranstion = `getAttr($tformNode + "." + $attr)`;
  
$attr = `rmanGetAttrName "vine_useMarker"`;
int $vine_useMarker = `getAttr($tformNode + "." + $attr)`;
  
// Use of Pixar's custom RenderMan Studio procedures begins here.
  
// To use the shader of a "Custom Shading Group that can be
// assigned to the transform node of your geometry uncomment
// the next line.
RiArchiveRecord("structure", "RLF Inject SurfaceShading");
  
  
if($vine_addStem == 1){
RiAttributeBegin();
    vector $stemVerts[], $stemNorms[];
    int $indexCount[];
    createStem($tformNode, $vine_vSeed, $vine_vden, $vine_vstep, $vine_vstepRand, $vine_vRot, $vine_vRad, $vine_vOffset, $vine_sTransition, $vine_blobFile, $stemVerts, $stemNorms, $indexCount);
    RiAttributeBegin();
        if($vine_blobFile != " ")
            RiReadArchive($vine_blobFile);
    RiAttributeEnd();
    
    if($vine_addLeaf == 1){
        vector $leaf[], $leafNorms[];
        generateLeaf($tformNode, size($indexCount), $vine_lSeed, $vine_lden, $leaf, $leafNorms);
        int $i;
        int $lnum = (int)(size($leaf) * $vine_lTransition);
        for($i = 0; $i < $lnum; $i++){
            
            RiAttributeBegin();
                vector $v = $leaf[$i];
                vector $n = $leafNorms[$i];
            
                float $x, $y, $z, $rx, $ry, $rz;
                $x = $v.x + rand(-$vine_lTrans, $vine_lTrans);
                $y = $v.y + rand(-$vine_lTrans, $vine_lTrans);
                $z = $v.z + rand(-$vine_lTrans, $vine_lTrans);
                RiTranslate($x, $y, $z);
                
                float $rot[] = aimY($n);
                RiRotate($rot[0] + rand(-$vine_lRot, $vine_lRot), 1,0,0);
                RiRotate($rot[1] + rand(- $vine_lRot, $vine_lRot), 0,0,1);
                RiRotate(rand(-$vine_lRot, $vine_lRot), 0,1,0); 
                
                RiScale(rand(0.9,1.1) * $vine_lScale, rand(0.9,1.1) * $vine_lScale, rand(0.9,1.1) * $vine_lScale);
                //RiScale(1,0.5,1);
                
                if($vine_useMarker == 1){
                    //place spheres
                    if(rand(0,1) < $vine_lmix)
                        RiReadArchive("/home/wanlyu20/mount/stuhome/vsfx705/test_forest/TREES/markerl.rib");
                    else
                        RiReadArchive("/home/wanlyu20/mount/stuhome/vsfx705/test_forest/TREES/markerl1.rib");
                }
                else{
                    if(rand(0,1) < $vine_lmix){    
                        if($vine_lfile1 != " "){
                            RiAttribute("identifier", "float id", rand(0,1000));
                            RiReadArchive($vine_lfile1);
                        }
                        else{
                            print("No Archive Specified. \n");
                            break;
                        }
                    }
                    else{
                        RiAttribute("identifier", "float id", rand(0,1000));
                        if($vine_lfile2 != " ")
                            RiReadArchive($vine_lfile2);
                        else{
                            print("No Archive Specified. \n");
                            break;
                        }
                    }
                }
            RiAttributeEnd();
        }
        
    }
    
    if($vine_addFlower == 1){
        vector $flower[], $flowerNorms[];
        generateLeaf($tformNode, size($indexCount), $vine_fSeed, $vine_fden, $flower, $flowerNorms);
        int $i;
        int $fnum = (int)(size($flower) * $vine_fTranstion);
        for($i = 0; $i < $fnum; $i++){
            
            RiAttributeBegin();
                vector $v = $flower[$i];
                vector $n = $flowerNorms[$i];
            
                float $x, $y, $z, $rx, $ry, $rz;
                $x = $v.x + rand(-$vine_fTrans, $vine_fTrans);
                $y = $v.y + rand(-$vine_fTrans, $vine_fTrans);
                $z = $v.z + rand(-$vine_fTrans, $vine_fTrans);
                RiTranslate($x, $y, $z);
                
                float $rot[] = aimY($n);
                RiRotate($rot[0] + rand(-$vine_fRot, $vine_fRot), 1,0,0);
                RiRotate($rot[1] + rand(- $vine_fRot, $vine_fRot), 0,0,1);
                RiRotate(rand(-$vine_fRot, $vine_fRot), 0,1,0); 
                
                RiScale(rand(0.8,1.2) * $vine_fScale, rand(0.8,1.2) * $vine_fScale, rand(0.8,1.2) * $vine_fScale);
                //RiScale(1,2,1);
                
                if($vine_useMarker == 1){
                    //place spheres
                    if(rand(0,1) < $vine_fmix){
                        //RiSphere(0.5,-0.5,0.5,360);
                    //    RiAttributeBegin();
                        RiReadArchive("/home/wanlyu20/mount/stuhome/vsfx705/test_forest/TREES/testlight.rib");
                //        RiAttributeEnd();
                        }
                    else{
                        //RiSphere(0.8, -0.8, 0.8, 360);
                //        RiAttributeBegin();
                        RiReadArchive("/home/wanlyu20/mount/stuhome/vsfx705/test_forest/TREES/markerf1.rib");
                    //    RiAttributeEnd();
                        }
                }
                else{
                    if(rand(0,1) < $vine_fmix){
                        if($vine_ffile1 != " "){
                            print("a\n");
                            RiReadArchive($vine_ffile1);
                            }
                        else{
                            print("No Archive Specified. \n");
                            break;
                        }
                    }
                    else{
                        if($vine_ffile2 != " ")
                            RiReadArchive($vine_ffile2);
                        else{
                            print("No Archive Specified. \n");
                            break;
                        }
                    }
                }
            RiAttributeEnd();
        }
    }
RiAttributeEnd();
select -r "vineCurves";
delete;
}
else{
    if($vine_addLeaf == 1){
        seed($vine_lSeed);
        vector $verts[], $norms[];
        getVertices($tformNode, $verts);
        getNormals($tformNode, $norms);
        
        vector $leaf[], $leafNorms[];
        int $i, $j;
        int $count = 0;
        for($i = 0; $i < size($verts); $i++){
            if(rand(0,1) < $vine_lden){
                $leaf[$count] = $verts[$i];
                $leafNorms[$count] = $norms[$i];
                $count++;
            }
        }
        
        clear($verts);
        clear($norms);
        
        for($i = 0; $i < size($leaf); $i++){
            int $num = (int)($vine_lden * 10) + 1;
            for($j = 0; $j < $num; $j++){
                RiAttributeBegin();
                    vector $v = $leaf[$i];
                    vector $n = $leafNorms[$i];
                    float $x, $y, $z, $rx, $ry, $rz;
                    
                    $x = $v.x + rand(-$vine_lTrans, $vine_lTrans);
                    $y = $v.y + rand(-$vine_lTrans, $vine_lTrans);
                    $z = $v.z + rand(-$vine_lTrans, $vine_lTrans);
                    RiTranslate($x, $y, $z); 
                    
                    float $rot[] = aimY($n);
                    RiRotate($rot[0] + rand(-$vine_lRot, $vine_lRot), 1,0,0);
                    RiRotate($rot[1] + rand(- $vine_lRot, $vine_lRot), 0,0,1);
                    RiRotate(rand(-$vine_lRot, $vine_lRot), 0,1,0);
                    
                    RiScale(rand(0.8,1.2) * $vine_lScale, rand(0.8,1.2) * $vine_lScale, rand(0.8,1.2) * $vine_lScale);
                    
                    if($vine_useMarker == 1){
                        if(rand(0,1) < $vine_lmix)
                            RiReadArchive("/home/wanlyu20/mount/stuhome/vsfx705/test_forest/TREES/markerl.rib");
                        else
                            RiReadArchive("/home/wanlyu20/mount/stuhome/vsfx705/test_forest/TREES/markerl1.rib");
                    }
                    else{
                        //print("a\n");
                    //    print($vine_lfile1 + "\n");
                        if(rand(0,1) < $vine_lmix){
                            if($vine_lfile1 != " "){
                                RiAttributeBegin();
                                    RiReadArchive($vine_lfile1);
                                RiAttributeEnd();
                            }
                            else{
                                print("No Archive Specified. \n");
                                break;
                            }
                        }
                        else{
                            if($vine_lfile2 != " "){
                                RiAttributeBegin();
                                    RiReadArchive($vine_lfile2);
                                RiAttributeEnd();
                            }
                            else{
                                print("No Archive Specified. \n");
                                break;
                            }
                        }
                    }
                RiAttributeEnd();
            }
        }
    }
    
    if($vine_addFlower == 1){
        vector $verts[], $norms[];
        getVertices($tformNode, $verts);
        getNormals($tformNode, $norms);
        
        vector $flower[], $flowerNorms[];
        int $i, $j;
        int $count = 0;
        for($i = 0; $i < size($verts); $i++){
            if(rand(0,1) < $vine_lden){
                $flower[$count] = $verts[$i];
                $flowerNorms[$count] = $norms[$i];
                $count++;
            }
        }
        
        clear($verts);
        clear($norms);
        
        for($i = 0; $i < size($flower); $i++){
            int $num = (int)($vine_fden * 10) + 1;
            for($j = 0; $j < $num; $j++){
                RiAttributeBegin();
                    vector $v = $flower[$i];
                    vector $n = $flowerNorms[$i];
                    float $x, $y, $z, $rx, $ry, $rz;
                    
                    $x = $v.x + rand(-$vine_fTrans, $vine_fTrans);
                    $y = $v.y + rand(-$vine_fTrans, $vine_fTrans);
                    $z = $v.z + rand(-$vine_fTrans, $vine_fTrans);
                    RiTranslate($x, $y, $z); 
                    
                    float $rot[] = aimY($n);
                    RiRotate($rot[0] + rand(-$vine_fRot, $vine_fRot), 1,0,0);
                    RiRotate($rot[1] + rand(- $vine_fRot, $vine_fRot), 0,0,1);
                    RiRotate(rand(-$vine_fRot, $vine_fRot), 0,1,0);
                    
                    RiScale(rand(0.8,1.2) * $vine_fScale, rand(0.8,1.2) * $vine_fScale, rand(0.8,1.2) * $vine_fScale);
                    
                    if($vine_useMarker == 1){
                        if(rand(0,1) < $vine_fmix)
                            RiReadArchive("/home/wanlyu20/mount/stuhome/vsfx705/test_forest/TREES/markerl.rib");
                        else
                            RiReadArchive("/home/wanlyu20/mount/stuhome/vsfx705/test_forest/TREES/markerl1.rib");
                    }
                    else{
                        if(rand(0,1) < $vine_fmix){
                            if($vine_ffile1 != " ")
                                RiReadArchive($vine_ffile1);
                            else{
                                print("No Archive Specified. \n");
                                break;
                            }
                        }
                        else{
                            if($vine_ffile2 != " ")
                                RiReadArchive($vine_ffile2);
                            else{
                                print("No Archive Specified. \n");
                                break;
                            }
                        }
                    }
                RiAttributeEnd();
            }
        }
    }
}
}
  
  