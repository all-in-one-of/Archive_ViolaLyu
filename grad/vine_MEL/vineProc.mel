//@author:Viola | Date 02/22/16
//----------------------------------
//stem
//----------------------------------

global proc createStem(string $tformNode, int $vseed, float $den, float $step, float $step_rand, 
						float $rotate, float $blobRad, float $offset, float $transition, string $path,
						vector $stemVerts[], vector $stemNorms[], int $indexCount[]) {
	
	//vector $stemVerts[];	//all vertices on stems
	//int $indexCount[];		//start anchor index number of each stem--length will be $numOfStems
	
	//grab vertices & normals of the current mesh;
	vector $meshVerts[], $meshNorms[];
	getVertices($tformNode, $meshVerts);
	getNormals($tformNode, $meshNorms);
	
	//select vertices as begin & end anchor
	vector $stemAnchors[];
	vector $stemAnchorsNorms[];
	int $stemAnchorCount = 0;
	int $i;
	seed($vseed);
	for($i = 0; $i < size($meshVerts); $i++) {
		//select
		if(rand(0,1) < $den) {
			vector $v = $meshVerts[$i];
			vector $n = $meshNorms[$i];
			$stemAnchors[$stemAnchorCount] = $v;
			$stemAnchorsNorms[$stemAnchorCount] = $n;
			$stemAnchorCount ++;
		}
	}
	//if number of selected points is odd, take away the last one in group;
	if($stemAnchorCount % 2 == 1){
		$stemAnchorCount --;
	}
	
	clear($meshVerts);
	clear($meshNorms);
	
	//sort by Y position & divide into begin & end anchor groups
	vector $start[], $start_norms[], $des[], $des_norms[];
	sortY($stemAnchors, $stemAnchorsNorms, $start, $des, $start_norms, $des_norms);
	
	//generate stems
	clear($stemVerts);
	clear($stemNorms);
	clear($indexCount);
	
	generate($tformNode, $start, $start_norms, $des, $des_norms, $step, $step_rand, $rotate, $stemVerts, $stemNorms, $indexCount);
	
	int $len[];
	createCurves($stemVerts, $stemNorms, $indexCount, $blobRad, $offset, $len);
	curvesToBlobbyVerts($blobRad, $transition, $len, $path);
}


global proc sortY(vector $verts[], vector $norms[],
				 vector $begin[], vector $end[], vector $begin_norms[], vector $end_norms[]) {
	int $num = size($verts);
	//remove the last one to make pairs
	if($num % 2 == 1){
		$num --;
	}
	
	//quick sort by Y position;
	quickSort($verts, $norms, 0, $num);
	
	//divide into two group
	int $i;
	for($i = 0; $i < $num / 2; $i++) {
		$begin[$i] = $verts[$i];
		$begin_norms[$i] = $norms[$i];
	}
	for($i = $num / 2; $i < $num; $i++){
		$end[$i - $num / 2] = $verts[$i];
		$end_norms[$i - $num / 2] = $norms[$i];
	}
	
	clear($verts);
	clear($norms);
}


global proc quickSort(vector $verts[], vector $norms[], int $left, int $right){
	int $i = $left;
	int $j = $right;
	vector $temp, $temp_norm;
	vector $vec = $verts[($left + $right) / 2];
	float $pivot = $vec.y;
	
	//partition
	while($i <= $j){
		vector $temp_v = $verts[$i];
		while($temp_v.y < $pivot){
			$i++;
			$temp_v = $verts[$i];
		}
		vector $temp_vv = $verts[$j];
		while($temp_vv.y > $pivot){
			$j--;
			$temp_vv = $verts[$j];
		}
		if($i <= $j){
			$temp = $verts[$i];
			$temp_norm = $norms[$i];
			$verts[$i] = $verts[$j];
			$norms[$i] = $norms[$j];
			$verts[$j] = $temp;
			$norms[$j] = $temp_norm;
			
			$i++;
			$j--;
		}
	}
	
	if($left < $j){
		quickSort($verts, $norms, $left, $j);
	}
	if($i < $right){
		quickSort($verts, $norms, $i, $right);
	}
	
}


global proc generate(string $tformNode, vector $s[], vector $sn[], vector $e[], vector $en[], 
					float $step, float $step_rand, float $rotate, vector $res[], vector $res_norms[], int $stemIndex[]){
	
	int $i;
	int $countIndex = 0;
	for($i = 0; $i < size($s); $i++){
		//take index anchor number
		$stemIndex[$i] = $countIndex;
		
		//add vertices
		vector $temp[];
		$temp[0] = $s[$i];
		vector $temp_des = $e[$i];
		vector $norm[];
		$norm[0] = $sn[$i];
		$e_norm = $en[$i];
		seed(106);
		while($temp[0] != $temp_des){
			computeStemVerts($tformNode, $temp, $temp_des, $norm, $e_norm, $step, $step_rand, $rotate, $temp, $norm);
			$res[$countIndex] = $temp[0];
			$res_norms[$countIndex] = $norm[0];
			$countIndex++;
		}
	}
}


global proc computeStemVerts(string $tformNode, vector $p_c[], vector $p_e, vector $norm[], vector $e_norm,
							float $step, float $step_rand, float $rotation, vector $p_near[], vector $n_near[]) {
	vector $dir = $p_e - $p_c[0];
	float $t_step = rand((1 - $step_rand) * $step, (1 + $step_rand) * $step);
	
	if(`mag $dir` <= $t_step){
		$p_near[0] = $p_e;
		$n_near[0] = $e_norm;
	}
	else{
		vector $p_temp;
		$dir = unit($dir);
		//vector $perp = 
		vector $unitNorm = unit($norm[0]);
		float $dotProduct = `dot $dir $unitNorm`;
		$dotProduct = acos($dotProduct);
		if($dotProduct < 0.5 || $dotProduct > 2.8){
			vector $temp_rand = <<rand(-0.5, 0.5), rand(-0.5, 0.5), rand(-0.5, 0.5)>>;
			$temp_rand = unit($temp_rand);
			$p_temp = $p_c[0] + $t_step * 2 * $temp_rand;
		}
		else{
		
			vector $temp = $t_step * $dir;		
			float $t_rotation = $rotation / 360.0 * 2 * 3.141592654;
			float $rot_rad = rand(-$t_rotation, $t_rotation);
			$temp = `rot $temp $norm[0] $rot_rad`;
			$p_temp = $p_c[0] + $temp;
		}
		float $pos[];
		$pos[0] = $p_temp.x;
		$pos[1] = $p_temp.y;
		$pos[2] = $p_temp.z;
	
		float $near[] = `nearestPointOnMesh -ip $pos[0] $pos[1] $pos[2] -q -p -f $tformNode`;
		
		$p_near[0] = <<$near[0], $near[1], $near[2]>>;
		$n_near[0] = getFaceNormal($tformNode, $near[3]);		
	}		
}


global proc vector getFaceNormal(string $tformNode, int $index) {
	string $face = $tformNode + ".f[" + $index + "]";
	string $norms[] = `polyInfo -fn $face`;
	string $buffer[];
	tokenize $norms[0] $buffer;
	float $x = $buffer[2];
	float $y = $buffer[3];
	float $z = $buffer[4];
	
	vector $result = <<$x, $y, $z>>;
	return $result;
}


global proc createCurves(vector $verts[], vector $norms[], int $index[], float $rad, float $offset, int $len[]) {
	//int $len[];
	int $i;
	for($i = 0; $i < size($index) - 1; $i++){
		$len[$i] = $index[$i + 1] - $index[$i];
	}
	$len[$i] = size($verts) - $index[$i];
	
	for($i = 0; $i < size($index); $i++) {
		string $curveGen = "curve -d 3";
		int $j;
		for($j = 0; $j < $len[$i]; $j++) {
			vector $tempP = $verts[$index[$i] + $j];
			vector $tempN = $norms[$index[$i] + $j];
			float $x = $tempP.x + $tempN.x * $rad * $offset;
			float $y = $tempP.y + $tempN.y * $rad * $offset;
			float $z = $tempP.z + $tempN.z * $rad * $offset;
			$curveGen += " -p " + $x + " " + $y + " " + $z;
		}
		$curveGen += " -n " + "test0";
		eval($curveGen);
		rebuildCurve -ch 1 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kep 1 -kt 1 -s 0 -d 3 -tol 0.1;
	}
	
	select -r "test*";
	group -n "vineCurves";
}



global proc curvesToBlobbyVerts(float $blobRad, float $trans, int $len[], string $path){
	int $i;
	vector $verts[];
	int $count = 0;
	int $index[];
	
	for($i = 0; $i < size($len); $i++) {
		$index[$i] = $count;
		float $step = 1.0 / (float)$len[$i] / 30.0;		
		
		float $j;
		float $temp[];
		for($j = 0.0; $j < 1.0; $j += $step){
			string $name = "test" + $i;
			$temp = `pointOnCurve -pr $j $name`;
			vector $p = <<$temp[0], $temp[1], $temp[2]>>;
			$verts[$count] = $p;
			$count ++; 
		}
		
	}

	//add vertices 
	meshToBlobbyVine($verts, $index, $path, $blobRad, $trans);
}


global proc meshToBlobbyVine(vector $verts[], int $index[], string $path, float $scale, float $trans){  
	//get vertices number of each curve
	int $i;
	int $len[];
	for($i = 0; $i < size($index) - 1; $i++){
		$len[$i] = $index[$i + 1] - $index[$i];
		$len[$i] = (int)($trans * $len[$i]);
	}
	$len[$i] = size($verts) - $index[$i];	
	$len[$i] = (int)($trans * $len[$i]);
	
	int $fileid = fopen($path, "w");
	for($i = 0; $i < size($len); $i++) {
		int $numBlobs = $len[$i];
		
		// Setup the initial definition of the blobby.
		fprint($fileid, "Blobby " + $numBlobs + " [\n");
		
		// Make each blob an ellipsoid and provide its array
		// index. The indices monotonously increment by 16.
		for($n = 0; $n < $numBlobs; $n++)
  		 	fprint($fileid, "1001 " + ($n * 16) + "\n");

		// Specify the blending code "0" and the number of 
		// blobs to blend.
		fprint($fileid, "0 " + $numBlobs);
		
		// Specify the list of the indices from the first
		// to the last blob.
		for($n = 0; $n < $numBlobs; $n++)
   			fprint($fileid, " " + $n);
		fprint($fileid, "]\n[\n");
		
		string  $row1, $row2, $row3, $row4;
		float   $v[];
		int $temp = $index[$i];
  
		// Specify the transformations of each blob
		for($n = 0; $n < $numBlobs; $n++) {
  			$row1 = $scale + " 0 0 0 ";
  			$row2 = " 0 " + $scale + " 0 0 ";
  			$row3 = " 0 0 " + $scale + " 0 ";
  			$v = $verts[$temp + $n];
  		 	$row4 = $v[0] + " " + $v[1] + " " + $v[2] + " 1\n";
   			fprint($fileid, $row1 + $row2 + $row3 + $row4);
  		}
		fprint($fileid, "] [\"\"]\n\n");	
	}
	fclose $fileid;  
}



//----------------------------------------
//leaf
//----------------------------------------

global proc generateLeaf(string $tformNode, int $num, int $fseed, float $den, vector $leaf[], vector $leafNorms[]) {
	int $i, $j, $count;
	seed($fseed);
	$count = 0;
	
	for($i = 0; $i < $num; $i++){
		
		string $tmpName = "test" + $i;
		float $start[] = `pointOnCurve -pr 0.0 $tmpName`;
		float $end[] = `pointOnCurve -pr 1.0 $tmpName`;
		int $leafnum = (int)($den *2 * ($end[1] - $start[1]));
		
		for($j = 0; $j < $leafnum; $j++){
		
			float $r1 = (float)$j / (float)$leafnum;
			float $r2 = (float)($j + 1) / (float)$leafnum;
			float $tmp = rand($r1, $r2);
			
			float $p[] = `pointOnCurve -pr $tmp $tmpName`;
			vector $v = <<$p[0], $p[1], $p[2]>>;
			$leaf[$count] = $v;
			
			//get Normal of the point
			float $near = `nearestPointOnMesh -ip $p[0] $p[1] $p[2] -q -f $tformNode`;
			vector $norm = getFaceNormal($tformNode, $near);
			$leafNorms[$count] = $norm;
			
			$count++;
		}
	}
}


